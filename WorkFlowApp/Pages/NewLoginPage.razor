@page "/new_login"

@layout LoginLayout
@inject ILoginService LoginService
@inject NavigationManager Navigation;
@attribute [Authorize]

<h1>Login</h1>
<p>Password "lpnz2xoflf6c"</p>

@if (errorMessage != null) 
{
    <div class="alert alert-danger">@errorMessage</div>
}

<p>Token: --> @token</p>
<p>Expiration: --> @expiration</p>
<p>User Key: --> @userKey</p>

<form>
    <div class="form-group">
        <label for="userName">User Name</label>
        <input type="userName" class="form-control" id="userName" @bind-value="userName">
    </div>
    <div class="form-group">
        <label for="password">Password</label>
        <input type="password" class="form-control" id="password" @bind-value="password">
    </div>
    <button type="submit" class="btn btn-primary" @onclick="LoginAsync">Login</button>
</form>



@code {
    private string userName="mamatkulov@uzcsd.uz";
    private string password="lpnz2xoflf6c";
    private string errorMessage;

    public string token = "none";
    public DateTime expiration;
    public string userKey = "none";

    private async Task LoginAsync() {
        var response = await LoginService.Login(userName, password);

        if (response != null)
        {
            errorMessage = null;
            token = response.Token;
            expiration = response.Expiration;
            userKey = response.UserKey;
            
        }
        
        else 
            errorMessage = "Invalid email or password";
        
        StateHasChanged();
    }
}