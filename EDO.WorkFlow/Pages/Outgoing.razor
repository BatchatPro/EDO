@page "/outgoing"
@attribute [Authorize]
@inject Toolbelt.Blazor.I18nText.I18nText I18nText
@inject WeatherForecastService ForecastService
@using EDO.WorkFlow.Models
@using EDO.WorkFlow.Data
@using System.Collections.ObjectModel

@*<DxGrid Data="@WeatherForecastData"
        PagerNavigationMode="PagerNavigationMode.InputBox"
        PageSizeSelectorVisible="true"
        PageSizeSelectorAllRowsItemVisible="true"
        PageSizeSelectorItems="@(new int[] { 5,10,20 })">
    <Columns>
        <DxGridDataColumn FieldName="Username" DisplayFormat="D" />
        <DxGridDataColumn FieldName="Towhom" Caption="" />
        <DxGridDataColumn FieldName="Shippingstatus" Caption=""  />
        <DxGridDataColumn FieldName="Description"  />
        <DxGridDataColumn FieldName="Data"  />
    </Columns>

    <TotalSummary>
        <DxGridSummaryItem SummaryType="GridSummaryItemType.Count" FieldName="Count" />
    </TotalSummary>

</DxGrid>
*@
@*@code {
    private IList<Outgoing> outgoingData = new List<Outgoing>();
    public class WeatherForecast
    {
        public string Username { get; set; }
        public string Towhom { get; set; }
        public string Shippingstatus { get; set; }
        public string Description { get; set; }
        public string Data { get; set; }
    }

    int DayCount { get; set; } = 0;
    ObservableCollection<WeatherForecast> WeatherForecastData { get; set; }
    static readonly Random Rnd = new Random();

    protected override void OnInitialized()
    {
        WeatherForecastData = new ObservableCollection<WeatherForecast>();
        foreach (var date in Enumerable.Range(1, 20).Select(i => DateTime.Now)) ;
    }
}*@


<style>
    .px-4 {
        padding-right: 0rem !important;
        padding-left: 0rem !important;
    }

    .dxbl-grid-header-content {
        display: -webkit-box;
        display: -webkit-flex;
        display: -ms-flexbox;
        display: block;
        text-align: center;
        color: #94B49F;
        -webkit-box-align: center;
        -webkit-align-items: center;
        -ms-flex-align: center;
        align-items: center;
        font-weight: var(--dxbl-grid-header-font-weight);
    }
</style>


@*<DxGrid Data="@GridData"
        PagerNavigationMode="PagerNavigationMode.InputBox"
        PageSizeSelectorVisible="true"
        PageSizeSelectorAllRowsItemVisible="true"
        PageSizeSelectorItems="@(new int[] { 5,10,20 })">
    <Columns>
        <DxGridDataColumn Field="@nameof(SampleData.Name)" Caption="Name"></DxGridDataColumn>
        <DxGridDataColumn Field="@nameof(SampleData.Age)" Caption="Age"></DxGridDataColumn>
        <DxGridDataColumn Field="@nameof(SampleData.Email)" Caption="Email"></DxGridDataColumn>
    </Columns>
</DxGrid>

@code {
    private List<SampleData> GridData = Enumerable.Range(0, 100).Select(i => new SampleData
        {
            Name = $"Name {i}",
            Age = i,
            Email = $"email{i}@email.com"
        }).ToList();

    private class SampleData
    {
        public string Name { get; set; }
        public int Age { get; set; }
        public string Email { get; set; }
    }
}*@



@*
<DxGrid Data="@outgoingData"
        PagerNavigationMode="PagerNavigationMode.InputBox"
        PageSizeSelectorVisible="true"
        PageSizeSelectorAllRowsItemVisible="true"
        PageSizeSelectorItems="@(new int[] { 5,10,20 })">
    <Columns>
        <DxGridDataColumn FieldName="Date" DisplayFormat="D" />
        <DxGridDataColumn FieldName="TemperatureC" Caption="@("Temp. (\x2103)")" />
        <DxGridDataColumn FieldName="TemperatureF" Caption="@("Temp. (\x2109)")" />
    </Columns>

</DxGrid>

@code {




    private IList<Outgoing> outgoingData = new List<Outgoing>();
    private class Outgoing
    {
        public string Username { get; set; }
        public string Towhom { get; set; }
        public string Shippingstatus { get; set; }
        public string Description { get; set; }
        public string Data { get; set; }
    }

    protected override async Task OnInitializedAsync() => outgoingData = await LoadDataAsync();

    private Task<List<Outgoing>> LoadDataAsync()
    {

        return Task.FromResult(new List<Outgoing>
        {
            new Outgoing { Username = "John Doe", Towhom = "", Shippingstatus = "New York", Description = "", Data = "" },
            new Outgoing { Username = "John Doe", Towhom = "", Shippingstatus = "New York", Description = "", Data = "" },
            new Outgoing { Username = "John Doe", Towhom = "", Shippingstatus = "New York", Description = "", Data = "" },
            new Outgoing { Username = "John Doe", Towhom = "", Shippingstatus = "New York", Description = "", Data = "" },
            new Outgoing { Username = "John Doe", Towhom = "", Shippingstatus = "New York", Description = "", Data = "" },
            new Outgoing { Username = "John Doe", Towhom = "", Shippingstatus = "New York", Description = "", Data = "" },
            new Outgoing { Username = "John Doe", Towhom = "", Shippingstatus = "New York", Description = "", Data = "" },
            new Outgoing { Username = "John Doe", Towhom = "", Shippingstatus = "New York", Description = "", Data = "" },
            new Outgoing { Username = "John Doe", Towhom = "", Shippingstatus = "New York", Description = "", Data = "" },
            new Outgoing { Username = "John Doe", Towhom = "", Shippingstatus = "New York", Description = "", Data = "" },
            new Outgoing { Username = "John Doe", Towhom = "", Shippingstatus = "New York", Description = "", Data = "" },
        });
    }
} 


*@



@*
<DxDataGrid Data="@outgoingData">
    <Columns>
        <DxGridDataColumn FieldName="@nameof(Outgoing.Username)" Caption="Code" />
        <DxGridDataColumn FieldName="@nameof(Outgoing.Towhom)" Caption="NameRU" />
        <DxGridDataColumn FieldName="@nameof(Outgoing.Shippingstatus)" Caption="NameUZ" />
        <DxGridDataColumn FieldName="@nameof(Outgoing.Description)" Caption="NameENG" />
        <DxGridDataColumn FieldName="@nameof(Outgoing.Data)" Caption="Note" />
    </Columns>
</DxDataGrid>


@code{
    private IList<Outgoing> outgoingData = new List<Outgoing>();

    private class Outgoing
    {
        public string Username { get; set; }
        public string Towhom { get; set; }
        public string Shippingstatus { get; set; }
        public string Description { get; set; }
        public string Data { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        outgoingData = await LoadDataAsync();
    }

    private Task<List<Outgoing>> LoadDataAsync()
    {

        return Task.FromResult(new List<Outgoing>
        {
            new Outgoing { Username = "John Doe", Towhom = "", Shippingstatus = "New York", Description = "", Data = "" },
            new Outgoing { Username = "John Doe", Towhom = "", Shippingstatus = "New York", Description = "", Data = "" },
            new Outgoing { Username = "John Doe", Towhom = "", Shippingstatus = "New York", Description = "", Data = "" },
            new Outgoing { Username = "John Doe", Towhom = "", Shippingstatus = "New York", Description = "", Data = "" },
            new Outgoing { Username = "John Doe", Towhom = "", Shippingstatus = "New York", Description = "", Data = "" },
            new Outgoing { Username = "John Doe", Towhom = "", Shippingstatus = "New York", Description = "", Data = "" },
            new Outgoing { Username = "John Doe", Towhom = "", Shippingstatus = "New York", Description = "", Data = "" },
            new Outgoing { Username = "John Doe", Towhom = "", Shippingstatus = "New York", Description = "", Data = "" },
            new Outgoing { Username = "John Doe", Towhom = "", Shippingstatus = "New York", Description = "", Data = "" },
            new Outgoing { Username = "John Doe", Towhom = "", Shippingstatus = "New York", Description = "", Data = "" },
            new Outgoing { Username = "John Doe", Towhom = "", Shippingstatus = "New York", Description = "", Data = "" },
        });
    }
}*@







@*<DxGrid Data="@Data" @ref="grid">

    <Columns>
        <DxGridDataColumn FieldName="Country" SortIndex="0" />
        <DxGridDataColumn FieldName="City" SortIndex="1" />
        <DxGridDataColumn FieldName="OrderDate" />
        <DxGridDataColumn FieldName="UnitPrice" DisplayFormat="c" />
        <DxGridDataColumn FieldName="Quantity" />
    </Columns>

</DxGrid>

@code {
    object Data { get; set;}
    IGrid grid { get; set; }

    private List<Person> gridData = new List<Person>
    {
        new Person { Username = "John Doe", Towhom = "", Shippingstatus = "New York", Description = "", Data = "" },
        new Person { Username = "John Doe", Towhom = "", Shippingstatus = "New York", Description = "", Data = "" },
        new Person { Username = "John Doe", Towhom = "", Shippingstatus = "New York", Description = "", Data = "" },
        new Person { Username = "John Doe", Towhom = "", Shippingstatus = "New York", Description = "", Data = "" },
        new Person { Username = "John Doe", Towhom = "", Shippingstatus = "New York", Description = "", Data = "" },
    };

    private class Person
    {
        public string Username { get; set; }
        public string Towhom { get; set; }
        public string Shippingstatus { get; set; }
        public string Description { get; set; }
        public string Data { get; set; }
    }
}*@



@*@inject WeatherForecastService ForecastService

<div class="Main">
    <div class="Main1">
        @if (forecasts == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <table class="Main_Table table">
                <thead style="background-color:white; text-align: center;">
                    <tr style="color: #94B49F;">
                        <th>Название</th>
                        <th>Кому</th>
                        <th>Статус отправки</th>
                        <th>Описание</th>
                        <th>Дата</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var forecast in forecasts)
                    {
                        <tr style="color:white;">
                            <td>
                                <button type="button" style="border-radius: 50%; background-color: #94B49F; padding: 0 7px; font-size: 12px;" data-toggle="modal" data-target="#exampleModalCenter">
                                    i
                                </button> @forecast.Username
                            </td>
                            <td>@forecast.Towhom</td>
                            <td style="color: green;">@forecast.Shippingstatus</td>
                            <td>@forecast.Description</td>
                            <td>@forecast.Data</td>
                        </tr>
                    }
                </tbody>
            </table>
        }

        <div class=" " style="background-color:white; margin: 0px !important;">
            <p style="color:black">Количество: 5 </p>
        </div>

        <div class="" style="background-color: #94B49F;">
            <nav aria-label="Page navigation example">
                <ul class="pagination">

                    <li class="page-item">
                        <a class="page-link" href="#" aria-label="Previous">
                            <span aria-hidden="true">&laquo;</span>
                            <span class="sr-only"></span>
                        </a>
                    </li>

                    <li class="page-item active" aria-current="page">
                        <span class="page-link">1</span>
                    </li>
                    <li class="page-item"><a class="page-link" href="#">2</a></li>
                    <li class="page-item"><a class="page-link" href="#">3</a></li>

                    <li class="page-item">
                        <a class="page-link" href="#" aria-label="Next">
                            <span aria-hidden="true">&raquo;</span>
                            <span class="sr-only"></span>
                        </a>
                    </li>

                </ul>
            </nav>
        </div>
    </div>
</div>



@code {
    I18nText.Localized Localized = new I18nText.Localized();

    private WeatherForecast[] forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
        Localized = await I18nText.GetTextTableAsync<I18nText.Localized>(this);
    }


}

<style>
    /* Table */
    .Main_Table{
        margin: 0px !important;
    }
    .Main{
        background-image: url(../wwwroot/Image/Frame1.png);
        padding: 0px !important;
    }
    body {
        background-image: url("Image/Frame1.png");
        background-size: cover;
        background-attachment: fixed;
    }
    td{
        font-family: sans-serif;
        font-size: 14px;
    }
    .px-4 {
        padding-right: 0rem !important;
        padding-left: 0rem !important;
    }
    .table > :not(caption) > * > * {
        border-right-width: 1px;
        padding-left: 20px !important;
    }
    p{
        margin: 0px !important;
    }
    .page-link {
        padding: .375rem .75rem;
        margin-left: 25px;
        background-color: #94B49F;
        color: white;
        margin-top: 10px;
        margin-bottom: 10px;
    }

    .page-item.active .page-link {
        z-index: 3;
        background-color: #3ebb8d;
        border-color: white;
    }

</style>
*@